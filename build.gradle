plugins {
    id 'fabric-loom' version '0.6-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.4.21'
    id 'net.minecrell.licenser' version "0.4.1"
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

repositories {
    maven {
        url = "http://maven.fabricmc.net/"
        name = "Fabric"
    }
    maven {
        name = "Ladysnake Libs"
        url = "https://dl.bintray.com/ladysnake/libs"
    }
    maven {
        url = 'https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master/'
    }
    maven {
        url = 'https://jitpack.io'
    }
    mavenCentral()
    jcenter()
}

// Licenser
license {
    header = rootProject.file('LICENSE_FILE_HEADER')
    include '**/*.java'
    include '**/*.kt'
    style.java = 'BLOCK_COMMENT'
    style.kt = 'BLOCK_COMMENT'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Kotlin
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Adds an API dependency on the base cardinal components module (required by every other module)
    modApi "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:${project.cca_version}"
    // Adds an implementation dependency on the entity module
    modImplementation "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}"
    include "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:${project.cca_version}"

    // ARRP
    modImplementation group: 'net.devtech', name: 'arrp', version: '0.3.4'
    include group: 'net.devtech', name: 'arrp', version: '0.3.4'

    // REI
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api:${project.rei_version}"
    modRuntime "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"

    // Microconfig
    modImplementation 'com.github.P03W:Microconfig:1.0.7'
    include 'com.github.P03W:Microconfig:1.0.7'

    // Multi item lib
    modImplementation 'com.github.OroArmor:Multi-Item-Lib:1.1.1'
    include 'com.github.OroArmor:Multi-Item-Lib:1.1.1'
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"

build.dependsOn updateLicenses
